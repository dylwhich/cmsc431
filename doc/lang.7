.TH Uncode 7 "March 2015" "CMSC 431" "User Manuals"
.
.SH NAME
Uncode \- A language created for the Compilers class
.
.SH DESCRIPTION
This language resembles something close to C-ish. This language is
compiled to the x86_64 assembly language with the
.B Proj2
compiler, from which an executable program can be assembled and linked using
.BR nasm (1)
and 
.BR gcc (1)
respectively.

.P 
The language supports basic integer and floating-point arithmetic, as
well as variables of each type, and print statements. Each of these
must be suffixed with a semicolon. All whitespace is ignored.
.
.SH LANGUAGE
.SS Mathematical Operations
The following mathematical operations are supported in decreasing
order of precedence. Expressions may be constructed from signed 64 bit
integers, double-precision floating-points, or other mathematical
expressions. Using operations on both integers and floating-points
will automaticallly promote them to floating-points. Booleans with the
value true will be treated as 1 or 1.0, and false will be treated as 0
or 0.0, as necessary.
.TP
(expression)
Parentheses. Override precedence of operators outside the parentheses. 
.TP
expression ** expression
For integers, performs basic integer exponentiation and returns 1 if
exponent is less than 1. For floats, performs C's pow function.
.TP
-expression
Negation. 
.TP
expression * expression
Multiplication. Same precedence as division and modulus.
.TP
expression / expression
Division. Same precedence as multiplication and modulus.
.TP
expression % expression
Modulus. Same precedence as multiplication and division.
.TP 
expression + expression
Addition. Same precedence as subtraction.
.TP
expression - expression
Subtraction. Same precedence as addition.

.SS Boolean Operations
The following boolean logic operations are supported. Any value not
equal to zero is treated as true, and zero is treated as false.
.TP
true
The logical value true.
.TP
false
The logic value false.
.TP
expression and expression
true if both expressions evaluate to true, and false otherwise.
.TP
expression xor expression
true if exactly one of the expressions evaluates to true, and false
otherwise.
.TP
expression or expression
true if either expression evaluates to true, and false otherwise.
.TP
!expression
true if expression evaluates to false, and false otherwise.

.
.SS Variables
The language supports an arbitrary number of integer and
floating-point variables. They must be declared and initialized before
they can be used.  The value of a variable is undefined until it has
been assigned to at least once. A valid variable identifier is within
1 and 63 characters long, contains only alphanumeric characters and
the underscore, and does not begin with a number.
.TP
int name
Declares an integer variable with the specified name.
.TP
float name
Declares a floating-point variable with the specified name.
.TP
bool name
Declares a boolean variable with the specified name.

.
.SS Arrays
The language supports statically-allocated arrays of type int, float,
or bool. No bounds checking is performed.
.TP
int name[size]
Declares an integer array of length size with the specified name
.TP
float name[size];
Declares a floating-point array of length size with the specified name
.TP
bool name[size];
Declares a boolean array of length size with the specified name

.
.SS Print Statements
The language supports two kinds of print statements: one which prints
a trailing newline and one which does not. The argument to these may
be: an integer expression, a float expression, or a string literal.
.TP
print stmt
Prints stmt without a trailing newline. The statement may be an integer
or a floating-point expression.
.TP
printl stmt
Prints stmt with a trailing newline. The statement may be an integer,
a floating-point expression, or a boolean value.
.
.SS Input Statements
The language also supports two input statements, for both integer and
floating point values.
.TP
readint
Reads an integer from stdin and returns it.
.TP
readfloat
Reads a float from stdin and returns it.

.SS If-Else Statements
The language support conditional execution of one or more statements.
.TP
if (expr) { stmt1; ...; } else { stmt2; ...; }
.TP
if (expr) stmt1; else stmt2;
Executes stmt1 if expr evaluates to a nonzero value, or executes stmt2
if expr is zero. To execute an if statement without an else statement,
the following may be used:
.TP
if (expr) stmt1; else pass;

.SS While Loops
The language supports while loops.
.TP
while (expr) { stmt; ...; }
.TP
while (expr) stmt;
Executes stmt until expr evaluates to zero.

.
.SS Break and Continue
The language supports breaking out of loops and continuing from their
start.
.TP
break;
Immediately ends the loop regardless of the evaluation of expr.
.TP
continue;
Immediately moves execution to the beginning of the loop. This causes
the rest of the loop to be skipped, and expr will be evaluated again.

.SS Functions
The language supports user-defined functions, which may be written as
follows:
.TP
def type name(type name, type name, ... ,) { stmt; ...; }
.TP
def type name(type name, type name, ... ,) stmt;

Type may be int, float, or bool. The return value may also be void, to
indicate that no value will be returned from this function.

Note that a trailing comma is required in parameter lists. Function
calls are written as follows:
.TP
\.name(expr, expr, ... ,);
Note that a trailing comma is also required in the argument list.

.
.SS Return Statements
The language supports returning from functions at any point. If no
return statement is present in a non-void function, the return value
of the last statement will be returned automatically.
.TP
return expr;
Returns a value from the function and immediately exits the function.
.TP
return;
Immediately exits from a void function.

.
.SH LIMITATIONS
.IP \(bu
String literals may not exceed 63 characters in length.
.IP \(bu
String literals cannot contain escaped quotes.
.IP \(bu
Printing multiple string literals may result in undefined behavior.
.IP \(bu
If statements must be followed by else statements.
.IP \(bu
Functions may be defined and called, but variables may be
inadvertently destroyed after printing values within a function. There
is no support for return values at this time.
.
.SH AUTHOR
Dylan Whichard <dylwhich@umbc.edu>
